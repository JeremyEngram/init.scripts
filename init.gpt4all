#!/bin/bash

wget https://github.com/nomic-ai/gpt4all/tree/main/gpt4all-chat;
wget https://docs.gpt4all.io/
git clone https://github.com/nomic-ai/gpt4all.git
wget https://github.com/nomic-ai/gpt4all/tree/main/gpt4all-bindings/python
wget https://gpt4all.io/installers/gpt4all-installer-linux.run







#!/usr/bin/env python3

def install_gpt4all():
    print("Installing gpt4all...")
    print("The easiest way to install the Python bindings for GPT4All is to use pip:")
    print("pip install gpt4all")
    print("This will download the latest version of the gpt4all package from PyPI.")

def build_gpt4all():
    print("Building the python bindings...")
    print("Clone GPT4All and change directory:")
    print("git clone --recurse-submodules https://github.com/nomic-ai/gpt4all.git")
    print("cd gpt4all/gpt4all-backend")
    print("Build the backend.")
    print("If you are using Windows and have Visual Studio installed:")
    print("cmake -B build")
    print("cmake --build build --parallel --config RelWithDebInfo")
    print("For all other platforms:")
    print("cmake -B build -DCMAKE_BUILD_TYPE=RelWithDebInfo")
    print("cmake --build build --parallel")
    print("RelWithDebInfo is a good default, but you can also use Release or Debug depending on the situation.")
    print("Install the Python package:")
    print("cd ../../gpt4all-bindings/python")
    print("pip install -e .")

def usage():
    print("Usage:")
    print("Test it out! In a Python script or console:")
    print("from gpt4all import GPT4All")
    print("model = GPT4All(\"orca-mini-3b-gguf2-q4_0.gguf\")")
    print("output = model.generate(\"The capital of France is \", max_tokens=3)")
    print("print(output)")
    print("GPU Usage:")
    print("from gpt4all import GPT4All")
    print("model = GPT4All(\"orca-mini-3b-gguf2-q4_0.gguf\", device='gpu') # device='amd', device='intel'")
    print("output = model.generate(\"The capital of France is \", max_tokens=3)")
    print("print(output)")

def troubleshooting():
    print("Troubleshooting a Local Build:")
    print("If you're on Windows and have compiled with a MinGW toolchain, you might run into an error like:")
    print("FileNotFoundError: Could not find module '<...>\\gpt4all-bindings\\python\\gpt4all\\llmodel_DO_NOT_MODIFY\\build\\libllmodel.dll'")
    print("(or one of its dependencies). Try using the full path with constructor syntax.")
    print("The key phrase in this case is 'or one of its dependencies'. The Python interpreter you're using probably doesn't see the MinGW runtime dependencies. At the moment, the following three are required: libgcc_s_seh-1.dll, libstdc++-6.dll and libwinpthread-1.dll. You should copy them from MinGW into a folder where Python will see them, preferably next to libllmodel.dll.")
    print("Note regarding the Microsoft toolchain: Compiling with MSVC is possible, but not the official way to go about it at the moment. MSVC doesn't produce DLLs with a lib prefix, which the bindings expect. You'd have to amend that yourself.")

def main():
    print("Python GPT4All Package Setup Script")
    print("-----------------------------------")
    print("1. Installation:")
    install_gpt4all()
    print("\n2. Local Build:")
    build_gpt4all()
    print("\n3. Usage:")
    usage()
    print("\n4. Troubleshooting:")
    troubleshooting()

if __name__ == "__main__":
    main()







from gpt4all import GPT4All

def main():
    # Initialize GPT4All model
    model = GPT4All("orca-mini-3b-gguf2-q4_0.gguf")

    print("Welcome to the GPT4All AI Chatbot!")
    print("You can start typing your messages. Enter 'exit' to quit.")

    # Chat loop
    while True:
        # Get user input
        user_input = input("You: ")

        # Check for exit command
        if user_input.lower() == 'exit':
            print("Goodbye!")
            break

        # Generate response from the model
        response = model.generate(user_input, max_tokens=50)

        # Print response
        print("GPT4All: ", response)

if __name__ == "__main__":
    main()

