#!/bin/bash

echo  "Interactive AI Code Shell That Directly Interacts With Linux"


pip install open-interpreter --break-system-packages



interpreter



An interactive demo is also available on Google Colab:
Open In Colab

Along with an example implementation of a voice interface (inspired by Her):
Open In Colab

Quick Start
pip install open-interpreter
Terminal
After installation, simply run interpreter:

interpreter
Python
import interpreter

interpreter.chat("Plot AAPL and META's normalized stock prices") # Executes a single command
interpreter.chat() # Starts an interactive chat
Comparison to ChatGPT's Code Interpreter
OpenAI's release of Code Interpreter with GPT-4 presents a fantastic opportunity to accomplish real-world tasks with ChatGPT.

However, OpenAI's service is hosted, closed-source, and heavily restricted:

No internet access.
Limited set of pre-installed packages.
100 MB maximum upload, 120.0 second runtime limit.
State is cleared (along with any generated files or links) when the environment dies.
Open Interpreter overcomes these limitations by running on your local environment. It has full access to the internet, isn't restricted by time or file size, and can utilize any package or library.

This combines the power of GPT-4's Code Interpreter with the flexibility of your local development environment.

Commands
Update: The Generator Update (0.1.5) introduced streaming:

message = "What operating system are we on?"

for chunk in interpreter.chat(message, display=False, stream=True):
  print(chunk)
Interactive Chat
To start an interactive chat in your terminal, either run interpreter from the command line:

interpreter
Or interpreter.chat() from a .py file:

interpreter.chat()
You can also stream each chunk:

message = "What operating system are we on?"

for chunk in interpreter.chat(message, display=False, stream=True):
  print(chunk)
Programmatic Chat
For more precise control, you can pass messages directly to .chat(message):

interpreter.chat("Add subtitles to all videos in /videos.")

# ... Streams output to your terminal, completes task ...

interpreter.chat("These look great but can you make the subtitles bigger?")

# ...
Start a New Chat
In Python, Open Interpreter remembers conversation history. If you want to start fresh, you can reset it:

interpreter.reset()
Save and Restore Chats
interpreter.chat() returns a List of messages, which can be used to resume a conversation with interpreter.messages = messages:

messages = interpreter.chat("My name is Killian.") # Save messages to 'messages'
interpreter.reset() # Reset interpreter ("Killian" will be forgotten)

interpreter.messages = messages # Resume chat from 'messages' ("Killian" will be remembered)
Customize System Message
You can inspect and configure Open Interpreter's system message to extend its functionality, modify permissions, or give it more context.

interpreter.system_message += """
Run shell commands with -y so the user doesn't have to confirm them.
"""
print(interpreter.system_message)
Change your Language Model
Open Interpreter uses LiteLLM to connect to language models.

You can change the model by setting the model parameter:

interpreter --model gpt-3.5-turbo
interpreter --model claude-2
interpreter --model command-nightly
In Python, set the model on the object:

interpreter.model = "gpt-3.5-turbo"
Find the appropriate "model" string for your language model here.

Running Open Interpreter locally
ⓘ Issues running locally? Read our new GPU setup guide and Windows setup guide.

You can run interpreter in local mode from the command line to use Code Llama:

interpreter --local
Or run any Hugging Face model locally by running --local in conjunction with a repo ID (e.g. "tiiuae/falcon-180B"):

interpreter --local --model tiiuae/falcon-180B
Local model params
You can easily modify the max_tokens and context_window (in tokens) of locally running models.

Smaller context windows will use less RAM, so we recommend trying a shorter window if GPU is failing.

interpreter --max_tokens 2000 --context_window 16000
Debug mode
To help contributors inspect Open Interpreter, --debug mode is highly verbose.

You can activate debug mode by using it's flag (interpreter --debug), or mid-chat:

$ interpreter
...
> %debug true <- Turns on debug mode

> %debug false <- Turns off debug mode
Interactive Mode Commands
In the interactive mode, you can use the below commands to enhance your experience. Here's a list of available commands:

Available Commands:
• %debug [true/false]: Toggle debug mode. Without arguments or with 'true', it enters debug mode. With 'false', it exits debug mode.
• %reset: Resets the current session.
• %undo: Remove previous messages and its response from the message history.
• %save_message [path]: Saves messages to a specified JSON path. If no path is provided, it defaults to 'messages.json'.
• %load_message [path]: Loads messages from a specified JSON path. If no path
is provided, it defaults to 'messages.json'.
• %help: Show the help message.

Configuration
Open Interpreter allows you to set default behaviors using a config.yaml file.

This provides a flexible way to configure the interpreter without changing command-line arguments every time.

Run the following command to open the configuration file:

interpreter --config
Safety Notice
Since generated code is executed in your local environment, it can interact with your files and system settings, potentially leading to unexpected outcomes like data loss or security risks.

⚠️ Open Interpreter will ask for user confirmation before executing code.

You can run interpreter -y or set interpreter.auto_run = True to bypass this confirmation, in which case:

Be cautious when requesting commands that modify files or system settings.
Watch Open Interpreter like a self-driving car, and be prepared to end the process by closing your terminal.
Consider running Open Interpreter in a restricted environment like Google Colab or Replit. These environments are more isolated, reducing the risks associated with executing arbitrary code.
How Does it Work?
Open Interpreter equips a function-calling language model with an exec() function, which accepts a language (like "Python" or "JavaScript") and code to run.

We then stream the model's messages, code, and your system's outputs to the terminal as Markdown.

Contributing
Thank you for your interest in contributing! We welcome involvement from the community.

Please see our Contributing Guidelines for more details on how to get involved.

License
Open Interpreter is licensed under the MIT License. You are permitted to use, copy, modify, distribute, sublicense and sell copies of the software.

Note: This software is not affiliated with OpenAI.

Having access to a junior programmer working at the speed of your fingertips ... can make new workflows effortless and efficient, as well as open the benefits of programming to new audiences.

— OpenAI's Code Interpreter Release
